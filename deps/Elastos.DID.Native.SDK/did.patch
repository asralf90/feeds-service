diff -ruN Elastos.DID.Native.SDK/deps/libcrystal/CMakeLists.txt Elastos.DID.Native.SDK-mod/deps/libcrystal/CMakeLists.txt
--- Elastos.DID.Native.SDK/deps/libcrystal/CMakeLists.txt	2020-08-10 10:35:52.000000000 +0800
+++ Elastos.DID.Native.SDK-mod/deps/libcrystal/CMakeLists.txt	2020-08-10 14:38:48.000000000 +0800
@@ -14,6 +14,8 @@
     DOWNLOAD_DIR ${PROJECT_DEPS_TARBALL_DIR}
     DOWNLOAD_NO_PROGRESS 1
 
+    PATCH_COMMAND ${PATCH_EXE} -s -p1 < ${CMAKE_CURRENT_LIST_DIR}/libcrystal.patch
+
     CMAKE_ARGS -DCMAKE_INSTALL_PREFIX=${PROJECT_INT_DIST_DIR}
         -DENABLE_STATIC=${ENABLE_STATIC}
         -DENABLE_SHARED=${ENABLE_SHARED}
diff -ruN Elastos.DID.Native.SDK/deps/libcrystal/libcrystal.patch Elastos.DID.Native.SDK-mod/deps/libcrystal/libcrystal.patch
--- Elastos.DID.Native.SDK/deps/libcrystal/libcrystal.patch	1970-01-01 08:00:00.000000000 +0800
+++ Elastos.DID.Native.SDK-mod/deps/libcrystal/libcrystal.patch	2020-08-10 14:39:07.000000000 +0800
@@ -0,0 +1,511 @@
+diff -ruN libcrystal/include/crystal/linkedhashtable.h libcrystal-mod/include/crystal/linkedhashtable.h
+--- libcrystal/include/crystal/linkedhashtable.h	2019-05-24 16:32:11.000000000 +0800
++++ libcrystal-mod/include/crystal/linkedhashtable.h	2020-08-10 13:04:22.000000000 +0800
+@@ -39,11 +39,11 @@
+     const void *        key;
+     size_t              keylen;
+     void *              data;
+-    char                __opaque[sizeof(void *) * 4];
++    char                __opaque[sizeof(void *) * 5];
+ } hash_entry_t;
+ 
+ typedef struct hashtable_iterator_t {
+-    char __opaque[sizeof(void *) * 4];
++    char __opaque[sizeof(void *) * 3];
+ } hashtable_iterator_t;
+ 
+ CRYSTAL_API
+diff -ruN libcrystal/src/CMakeLists.txt libcrystal-mod/src/CMakeLists.txt
+--- libcrystal/src/CMakeLists.txt	2019-05-24 16:32:11.000000000 +0800
++++ libcrystal-mod/src/CMakeLists.txt	2020-08-10 13:04:22.000000000 +0800
+@@ -28,6 +28,8 @@
+         "slim-pthread or pthreads-win32 are recommended.")
+ endif()
+ 
++set(CMAKE_C_STANDARD 99)
++
+ set(SRC
+     base58.c
+     bitset.c
+diff -ruN libcrystal/src/crypto.c libcrystal-mod/src/crypto.c
+--- libcrystal/src/crypto.c	2019-05-24 16:32:11.000000000 +0800
++++ libcrystal-mod/src/crypto.c	2020-08-10 14:37:09.000000000 +0800
+@@ -164,6 +164,8 @@
+ #pragma GCC diagnostic pop
+ #endif
+ 
++#define STACK_BUFFER_MAXSIZE (2 * 1024)
++
+ ssize_t crypto_encrypt(const uint8_t *key, const uint8_t *nonce,
+                        const uint8_t *plain, size_t length, uint8_t *encrypted)
+ {
+@@ -173,20 +175,42 @@
+     if (length == 0 || !key || !nonce || !plain || !encrypted)
+         return -1;
+ 
+-    _plain = (uint8_t *)alloca(length + crypto_box_ZEROBYTES);
+-    _encrypted = (uint8_t *)alloca(length + crypto_box_MACBYTES + crypto_box_BOXZEROBYTES);
++    if(length > STACK_BUFFER_MAXSIZE) {
++        _plain = (uint8_t *)malloc(length + crypto_box_ZEROBYTES);
++        if(!_plain)
++            return -1;
++        _encrypted = (uint8_t *)malloc(length + crypto_box_MACBYTES + crypto_box_BOXZEROBYTES);
++        if(!_encrypted) {
++            free(_plain);
++            return -1;
++        }
++    } else {
++        _plain = (uint8_t *)alloca(length + crypto_box_ZEROBYTES);
++        _encrypted = (uint8_t *)alloca(length + crypto_box_MACBYTES + crypto_box_BOXZEROBYTES);
++    }
+ 
+     // Pad the plain with 32 zero bytes.
+     memset(_plain, 0, crypto_box_ZEROBYTES);
+     memcpy(_plain + crypto_box_ZEROBYTES, plain, length);
+ 
+     if (crypto_box_afternm(_encrypted, _plain, length + crypto_box_ZEROBYTES,
+-                           nonce, key) != 0)
++                           nonce, key) != 0) {
++        if(length > STACK_BUFFER_MAXSIZE) {
++            free(_plain);
++            free(_encrypted);
++        }
+         return -1;
++    }
+ 
+     /* Unpad the encrypted message. */
+     memcpy(encrypted, _encrypted + crypto_box_BOXZEROBYTES,
+            length + crypto_box_MACBYTES);
++
++    if(length > STACK_BUFFER_MAXSIZE) {
++        free(_plain);
++        free(_encrypted);
++    }
++
+     return length + crypto_box_MACBYTES;
+ }
+ 
+@@ -215,18 +239,40 @@
+         || !encrypted || !plain)
+         return -1;
+ 
+-    _plain = (uint8_t *)alloca(length + crypto_box_ZEROBYTES);
+-    _encrypted = (uint8_t *)alloca(length + crypto_box_BOXZEROBYTES);
++    if(length > STACK_BUFFER_MAXSIZE) {
++        _plain = (uint8_t *)malloc(length + crypto_box_ZEROBYTES);
++        if(!_plain)
++            return -1;
++        _encrypted = (uint8_t *)malloc(length + crypto_box_BOXZEROBYTES);
++        if(!_encrypted) {
++            free(_plain);
++            return -1;
++        }
++    } else {
++        _plain = (uint8_t *)alloca(length + crypto_box_ZEROBYTES);
++        _encrypted = (uint8_t *)alloca(length + crypto_box_BOXZEROBYTES);
++    }
+ 
+     // Pad the encrypted message with 16 zero bytes.
+     memset(_encrypted, 0, crypto_box_BOXZEROBYTES);
+     memcpy(_encrypted + crypto_box_BOXZEROBYTES, encrypted, length);
+ 
+     if (crypto_box_open_afternm(_plain, _encrypted,
+-                        length + crypto_box_BOXZEROBYTES, nonce, key) != 0)
++                        length + crypto_box_BOXZEROBYTES, nonce, key) != 0) {
++        if(length > STACK_BUFFER_MAXSIZE) {
++            free(_plain);
++            free(_encrypted);
++        }
+         return -1;
++    }
+ 
+     memcpy(plain, _plain + crypto_box_ZEROBYTES, length - crypto_box_MACBYTES);
++
++    if(length > STACK_BUFFER_MAXSIZE) {
++        free(_plain);
++        free(_encrypted);
++    }
++
+     return length - crypto_box_MACBYTES;
+ }
+ 
+diff -ruN libcrystal/src/linkedhashtable.c libcrystal-mod/src/linkedhashtable.c
+--- libcrystal/src/linkedhashtable.c	2019-05-24 16:32:11.000000000 +0800
++++ libcrystal-mod/src/linkedhashtable.c	2020-08-10 13:04:22.000000000 +0800
+@@ -41,6 +41,7 @@
+     size_t               keylen;
+     void *               data;
+     uint32_t             hash_code;
++    int                  mod_count;
+     struct _hash_entry_i *next;
+     struct _hash_entry_i *lst_prev;
+     struct _hash_entry_i *lst_next;
+@@ -49,7 +50,6 @@
+ typedef struct hashtable_iterator_i {
+     hashtable_t *htab;
+     hash_entry_i *current;
+-    hash_entry_i *next;
+     int expected_mod_count;
+ } hashtable_iterator_i;
+ 
+@@ -61,7 +61,6 @@
+ struct _hashtable_t {
+     size_t      capacity;
+     size_t      count;
+-    int         mod_count;
+     int         synced;
+     pthread_rwlock_t lock;
+ 
+@@ -135,7 +134,6 @@
+ 
+     htab->capacity = capacity;
+     htab->count = 0;
+-    htab->mod_count = 0;
+     htab->synced = synced;
+ 
+     htab->hash_code = hash_code ? hash_code : default_hash_code;
+@@ -143,6 +141,8 @@
+ 
+     htab->lst_head.lst_next = &htab->lst_head;
+     htab->lst_head.lst_prev = &htab->lst_head;
++    htab->lst_head.data = htab;
++    htab->lst_head.mod_count = 0;
+ 
+     return htab;
+ }
+@@ -190,6 +190,7 @@
+     entry = htab->lst_head.lst_next;
+     while (entry != &htab->lst_head) {
+         cur = entry;
++        cur->mod_count++;
+         entry = entry->lst_next;
+ 
+         deref(cur->data);
+@@ -201,31 +202,22 @@
+     htab->lst_head.lst_prev = &htab->lst_head;
+ 
+     htab->count = 0;
+-    htab->mod_count++;
+ }
+ 
+-static void hashtable_destroy(void *htab)
++static void hashtable_destroy(void *obj)
+ {
+-    int synced;
+-    pthread_rwlock_t lock;
+-
+-    if (!htab)
+-        return;
++    hashtable_t *htab = obj;
+ 
+-    synced = ((hashtable_t *)htab)->synced;
+-
+-    if (synced) {
+-        lock = ((hashtable_t *)htab)->lock;
+-        if (pthread_rwlock_wrlock(&lock) != 0)
++    if (htab->synced) {
++        if (pthread_rwlock_wrlock(&htab->lock) != 0)
+             return;
+     }
+ 
+     hashtable_clear_i(htab);
+-    memset(htab, 0, sizeof(hashtable_t));
+ 
+-    if (synced) {
+-        pthread_rwlock_unlock(&lock);
+-        pthread_rwlock_destroy(&lock);
++    if (htab->synced) {
++        pthread_rwlock_unlock(&htab->lock);
++        pthread_rwlock_destroy(&htab->lock);
+     }
+ }
+ 
+@@ -299,13 +291,14 @@
+         new_entry->lst_prev->lst_next = new_entry;
+         new_entry->lst_next->lst_prev = new_entry;
+ 
++        (*ent)->mod_count++;
+         deref((*ent)->data);
+         *ent = new_entry;
+     } else {
+         hashtable_add(htab, entry);
+     }
+ 
+-    htab->mod_count++;
++    new_entry->mod_count++;
+ 
+     hashtable_unlock(htab);
+ 
+@@ -331,7 +324,6 @@
+     hashtable_unlock(htab);
+ 
+     return val;
+-
+ }
+ 
+ int hashtable_exist(hashtable_t *htab, const void *key, size_t keylen)
+@@ -377,12 +369,13 @@
+         to_remove->lst_prev->lst_next = to_remove->lst_next;
+         to_remove->lst_next->lst_prev = to_remove->lst_prev;
+ 
++        to_remove->mod_count++;
++
+         // val = deref(to_remove->data);
+         // Pass reference to caller
+         val = to_remove->data;
+ 
+         htab->count--;
+-        htab->mod_count++;
+     }
+ 
+     return val;
+@@ -431,10 +424,10 @@
+ 
+     hashtable_rlock(htab);
+ 
+-    it->htab = htab;
+-    it->current = NULL;
+-    it->next = htab->lst_head.lst_next;
+-    it->expected_mod_count = htab->mod_count;
++    it->htab = ref(htab);
++    it->current = &htab->lst_head;
++    ref(it->current->data);
++    it->expected_mod_count = it->current->mod_count;
+ 
+     hashtable_unlock(htab);
+ 
+@@ -445,26 +438,34 @@
+ int hashtable_iterator_next(hashtable_iterator_t *iterator, void **key,
+                               size_t *keylen, void **data)
+ {
+-    int rc;
+     hashtable_iterator_i *it = (hashtable_iterator_i *)iterator;
+ 
+-    assert(it && it->htab && it->next && data);
+-    if (!it || !it->htab || !it->next || !data) {
++    assert(it && data);
++    if (!it || !data) {
+         errno = EINVAL;
+         return -1;
+     }
+ 
++    if (!it->htab)
++        return 0;
++
+     hashtable_rlock(it->htab);
+ 
+-    if (it->expected_mod_count != it->htab->mod_count) {
+-        errno = EAGAIN;
+-        rc = -1;
+-    } else {
+-        if (it->next == &it->htab->lst_head) { // end
+-            rc = 0;
++    if (it->expected_mod_count == it->current->mod_count) {
++        deref(it->current->data);
++
++        if (it->current->lst_next == &it->htab->lst_head) {
++            hashtable_unlock(it->htab);
++            deref(it->htab);
++            it->current = NULL;
++            it->htab = NULL;
++            it->expected_mod_count = 0;
++
++            return 0;
+         } else {
+-            it->current = it->next;
+-            it->next = it->next->lst_next;
++            it->current = it->current->lst_next;
++            ref(it->current->data);
++            it->expected_mod_count = it->current->mod_count;
+ 
+             if (key)
+                 *key = (void *)it->current->key;
+@@ -474,57 +475,82 @@
+             *data = it->current->data;
+             ref(*data);
+ 
+-            rc = 1;
++            hashtable_unlock(it->htab);
++
++            return 1;
+         }
+-    }
++    } else {
++        deref(it->current->data);
+ 
+-    hashtable_unlock(it->htab);
++        if (!it->htab->count) {
++            hashtable_unlock(it->htab);
++            deref(it->htab);
++            it->htab = NULL;
++            it->current = NULL;
++            it->expected_mod_count = 0;
+ 
+-    return rc;
++            return 0;
++        } else {
++            it->current = it->htab->lst_head.lst_next;
++            ref(it->current->data);
++            it->expected_mod_count = it->current->mod_count;
++
++            if (key)
++                *key = (void *)it->current->key;
++            if (keylen)
++                *keylen = it->current->keylen;
++
++            *data = it->current->data;
++            ref(*data);
++
++            hashtable_unlock(it->htab);
++
++            return 1;
++        }
++    }
+ }
+ 
+ int hashtable_iterator_has_next(hashtable_iterator_t *iterator)
+ {
+     hashtable_iterator_i *it = (hashtable_iterator_i *)iterator;
+ 
+-    assert(it && it->htab && it->next);
+-    if (!it || !it->htab || !it->next) {
++    assert(it);
++    if (!it) {
+         errno = EINVAL;
+         return 0;
+     }
+ 
+-    return it->next != &it->htab->lst_head;
++    return it->htab ? 1 : 0;
+ }
+ 
+ // return 1 on success, 0 nothing removed, -1 on modified conflict or error.
+ int hashtable_iterator_remove(hashtable_iterator_t *iterator)
+ {
+-    void *ptr;
+     hashtable_iterator_i *it = (hashtable_iterator_i *)iterator;
++    hash_entry_i *tmp;
+ 
+-    assert(it && it->htab && it->next && it->current);
+-    if (!it || !it->htab || !it->next || !it->current) {
++    assert(it && it->htab && it->current && it->current != &it->htab->lst_head);
++    if (!it || !it->htab || !it->current || it->current == &it->htab->lst_head) {
+         errno = EINVAL;
+         return -1;
+     }
+ 
+     hashtable_wlock(it->htab);
+ 
+-    if (it->expected_mod_count != it->htab->mod_count) {
+-        errno = EAGAIN;
++    if (it->expected_mod_count != it->current->mod_count) {
+         hashtable_unlock(it->htab);
+-        return -1;
++        return 0;
+     }
+ 
+-    ptr = hashtable_remove_nolock(it->htab, it->current->key, it->current->keylen);
+-    if (ptr) {
+-        deref(ptr);
+-        it->current = NULL;
+-        it->expected_mod_count++;
+-        hashtable_unlock(it->htab);
+-        return 1;
+-    }
++    deref(it->current->data);
++    tmp = it->current;
++    it->current = tmp->lst_prev;
++    ref(it->current->data);
++    it->expected_mod_count = it->current->mod_count;
++
++    deref(hashtable_remove_nolock(it->htab, tmp->key, tmp->keylen));
+ 
+     hashtable_unlock(it->htab);
+-    return 0;
++
++    return 1;
+ }
+diff -ruN libcrystal/src/linkedlist.c libcrystal-mod/src/linkedlist.c
+--- libcrystal/src/linkedlist.c	2019-05-24 16:32:11.000000000 +0800
++++ libcrystal-mod/src/linkedlist.c	2020-08-10 13:04:22.000000000 +0800
+@@ -303,28 +303,20 @@
+     list_unlock(lst);
+ }
+ 
+-static void list_destroy(void *lst)
++static void list_destroy(void *obj)
+ {
+-    int synced;
+-    pthread_rwlock_t lock;
++    list_t *lst = obj;
+ 
+-    if (!lst)
+-        return;
+-
+-    synced = ((list_t *)lst)->synced;
+-
+-    if (synced) {
+-        lock = ((list_t *)lst)->lock;
+-        if (pthread_rwlock_wrlock(&lock) != 0)
++    if (lst->synced) {
++        if (pthread_rwlock_wrlock(&lst->lock) != 0)
+             return;
+     }
+ 
+-    list_clear_i((list_t *)lst);
+-    memset(lst, 0, sizeof(list_t));
++    list_clear_i(lst);
+ 
+-    if (synced) {
+-        pthread_rwlock_unlock(&lock);
+-        pthread_rwlock_destroy(&lock);
++    if (lst->synced) {
++        pthread_rwlock_unlock(&lst->lock);
++        pthread_rwlock_destroy(&lst->lock);
+     }
+ }
+ 
+diff -ruN libcrystal/src/vlog.c libcrystal-mod/src/vlog.c
+--- libcrystal/src/vlog.c	2019-05-24 16:32:11.000000000 +0800
++++ libcrystal-mod/src/vlog.c	2020-08-10 13:04:22.000000000 +0800
+@@ -25,6 +25,7 @@
+ #include <time.h>
+ #include <stdarg.h>
+ #include <pthread.h>
++#include <stddef.h>
+ 
+ #include "crystal/vlog.h"
+ 
+@@ -222,15 +223,29 @@
+         level = VLOG_VERBOSE;
+ 
+     char timestr[20];
+-    char buf[1024];
++    char *buf;
++    va_list args_dup;
+     time_t cur = time(NULL);
++    int rc;
++
++    va_copy(args_dup, args);
++    rc = vsnprintf(NULL, 0, format, args_dup);
++    va_end(args_dup);
++    if (rc <= 0)
++        return;
++
++    buf = rc + 1 > 1024 ? malloc(rc + 1) : alloca(rc + 1);
++    if (!buf)
++        return;
+ 
+     strftime(timestr, 20, TIME_FORMAT, localtime(&cur));
+-    vsnprintf(buf, sizeof(buf), format, args);
+-    buf[1023] = 0;
++    vsnprintf(buf, rc + 1, format, args);
+ 
+     output(level, "%s - %-7s : %s\n",
+             timestr, level_names[level], buf);
++
++    if (rc + 1 > 1024)
++        free(buf);
+ }
+ 
+ void vlog(int level, const char *format, ...)
